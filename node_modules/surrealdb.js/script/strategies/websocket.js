"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketStrategy = void 0;
const errors_js_1 = require("../errors.js");
const Pinger_js_1 = require("../library/Pinger.js");
const SurrealSocket_js_1 = require("../library/SurrealSocket.js");
class WebSocketStrategy {
    /**
     * Establish a socket connection to the database
     * @param connection - Connection details
     */
    constructor(url, options = {}) {
        Object.defineProperty(this, "socket", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "pinger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ready", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "resolveReady", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.resolveReady = () => { }; // Purely for typescript typing :)
        this.ready = new Promise((r) => this.resolveReady = r);
        if (url)
            this.connect(url, options);
    }
    /**
     * Establish a socket connection to the database
     * @param connection - Connection details
     */
    connect(url, { prepare, } = {}) {
        this.socket?.close(1000);
        this.pinger = new Pinger_js_1.Pinger(30000);
        this.socket = new SurrealSocket_js_1.SurrealSocket({
            url,
            onOpen: async () => {
                this.pinger?.start(() => this.ping());
                await prepare?.(this);
                this.resolveReady();
            },
            onClose: () => {
                this.pinger?.stop();
                this.resetReady();
            },
        });
        this.socket.open();
    }
    /**
     * Disconnect the socket to the database
     */
    async close() {
        await this.socket?.close(1000);
        this.socket = undefined;
    }
    /**
     * Check if connection is ready
     */
    async wait() {
        if (!this.socket)
            throw new errors_js_1.NoActiveSocket();
        await this.ready;
    }
    /**
     * Get status of the socket connection
     */
    get status() {
        if (!this.socket)
            throw new errors_js_1.NoActiveSocket();
        return this.socket.connectionStatus;
    }
    /**
     * Ping SurrealDB instance
     */
    async ping() {
        const { error } = await this.send("ping");
        if (error)
            throw new Error(error.message);
    }
    /**
     * Switch to a specific namespace and database.
     * @param ns - Switches to a specific namespace.
     * @param db - Switches to a specific database.
     */
    async use(ns, db) {
        const { error } = await this.send("use", [ns, db]);
        if (error)
            throw new Error(error.message);
    }
    /**
     * Retrieve info about the current Surreal instance
     * @return Returns nothing!
     */
    async info() {
        const res = await this.send("info");
        if (res.error)
            throw new Error(res.error.message);
    }
    /**
     * Signs up to a specific authentication scope.
     * @param vars - Variables used in a signup query.
     * @return The authentication token.
     */
    async signup(vars) {
        const res = await this.send("signup", [vars]);
        if (res.error)
            throw new Error(res.error.message);
        return res.result;
    }
    /**
     * Signs in to a specific authentication scope.
     * @param vars - Variables used in a signin query.
     * @return The authentication token.
     */
    async signin(vars) {
        const res = await this.send("signin", [vars]);
        if (res.error)
            throw new Error(res.error.message);
        return res.result;
    }
    /**
     * Authenticates the current connection with a JWT token.
     * @param token - The JWT authentication token.
     */
    async authenticate(token) {
        const res = await this.send("authenticate", [token]);
        if (res.error)
            throw new Error(res.error.message);
    }
    /**
     * Invalidates the authentication for the current connection.
     */
    async invalidate() {
        const res = await this.send("invalidate");
        if (res.error)
            throw new Error(res.error.message);
    }
    /**
     * Specify a variable for the current socket connection.
     * @param key - Specifies the name of the variable.
     * @param val - Assigns the value to the variable name.
     */
    async let(variable, value) {
        const res = await this.send("let", [variable, value]);
        if (res.error)
            throw new Error(res.error.message);
        return res.result;
    }
    /**
     * Runs a set of SurrealQL statements against the database.
     * @param query - Specifies the SurrealQL statements.
     * @param vars - Assigns variables which can be used in the query.
     */
    async query(query, vars) {
        await this.ready;
        const res = await this.send("query", [query, vars]);
        if (res.error)
            throw new Error(res.error.message);
        return res.result;
    }
    /**
     * Selects all records in a table, or a specific record, from the database.
     * @param thing - The table name or a record ID to select.
     */
    async select(thing) {
        await this.ready;
        const res = await this.send("select", [thing]);
        return this.outputHandler(res, thing);
    }
    /**
     * Creates a record in the database.
     * @param thing - The table name or the specific record ID to create.
     * @param data - The document / record data to insert.
     */
    async create(thing, data) {
        await this.ready;
        const res = await this.send("create", [thing, data]);
        return this.outputHandler(res, thing);
    }
    /**
     * Updates all records in a table, or a specific record, in the database.
     *
     * ***NOTE: This function replaces the current document / record data with the specified data.***
     * @param thing - The table name or the specific record ID to update.
     * @param data - The document / record data to insert.
     */
    async update(thing, data) {
        await this.ready;
        const res = await this.send("update", [thing, data]);
        return this.outputHandler(res, thing);
    }
    /**
     * Modifies all records in a table, or a specific record, in the database.
     *
     * ***NOTE: This function merges the current document / record data with the specified data.***
     * @param thing - The table name or the specific record ID to change.
     * @param data - The document / record data to insert.
     */
    async change(thing, data) {
        await this.ready;
        const res = await this.send("change", [thing, data]);
        return this.outputHandler(res, thing);
    }
    /**
     * Applies JSON Patch changes to all records, or a specific record, in the database.
     *
     * ***NOTE: This function patches the current document / record data with the specified JSON Patch data.***
     * @param thing - The table name or the specific record ID to modify.
     * @param data - The JSON Patch data with which to modify the records.
     */
    async modify(thing, data) {
        await this.ready;
        const res = await this.send("modify", [
            thing,
            data,
        ]);
        return this.outputHandler(res, thing);
    }
    /**
     * Deletes all records in a table, or a specific record, from the database.
     * @param thing - The table name or a record ID to select.
     */
    async delete(thing) {
        await this.ready;
        const res = await this.send("delete", [thing]);
        if (res.error)
            throw new Error(res.error.message);
    }
    /**
     * Send a raw message to the SurrealDB instance
     * @param method - Type of message to send.
     * @param params - Parameters for the message.
     */
    send(method, params) {
        return new Promise((resolve) => {
            if (!this.socket)
                throw new errors_js_1.NoActiveSocket();
            this.socket.send(method, params ?? [], (r) => resolve(r));
        });
    }
    /**
     * Process a response by the SurrealDB instance
     * @param res - The raw response
     * @param thing - What thing did you query (table vs record).
     */
    outputHandler(res, thing) {
        if (res.error)
            throw new Error(res.error.message);
        const isSingleThing = thing && thing.includes(":");
        if (Array.isArray(res.result)) {
            return isSingleThing ? res.result[0] : res.result;
        }
        else if ("id" in (res.result ?? {})) {
            return res.result;
        }
        else if (res.result === null) {
            return isSingleThing ? undefined : [];
        }
        console.debug(thing, res);
        throw new errors_js_1.UnexpectedResponse();
    }
    /**
     * Reset the ready mechanism.
     */
    resetReady() {
        this.ready = new Promise((r) => (this.resolveReady = r));
    }
}
exports.WebSocketStrategy = WebSocketStrategy;
//# sourceMappingURL=websocket.js.map